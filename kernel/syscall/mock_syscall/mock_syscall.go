// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../development/scripts/../../kernel/syscall/syscall.go

package mock_syscall

import (
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of Syscall_FS interface
type MockSyscall_FS struct {
	ctrl     *gomock.Controller
	recorder *_MockSyscall_FSRecorder
}

// Recorder for MockSyscall_FS (not exported)
type _MockSyscall_FSRecorder struct {
	mock *MockSyscall_FS
}

func NewMockSyscall_FS(ctrl *gomock.Controller) *MockSyscall_FS {
	mock := &MockSyscall_FS{ctrl: ctrl}
	mock.recorder = &_MockSyscall_FSRecorder{mock}
	return mock
}

func (_m *MockSyscall_FS) EXPECT() *_MockSyscall_FSRecorder {
	return _m.recorder
}

func (_m *MockSyscall_FS) BindMountReadWrite(source string, mountPoint string) error {
	ret := _m.ctrl.Call(_m, "BindMountReadWrite", source, mountPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSyscall_FSRecorder) BindMountReadWrite(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindMountReadWrite", arg0, arg1)
}

func (_m *MockSyscall_FS) BindMountReadOnly(source string, mountPoint string) error {
	ret := _m.ctrl.Call(_m, "BindMountReadOnly", source, mountPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSyscall_FSRecorder) BindMountReadOnly(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindMountReadOnly", arg0, arg1)
}

func (_m *MockSyscall_FS) Unmount(mountPoint string) error {
	ret := _m.ctrl.Call(_m, "Unmount", mountPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSyscall_FSRecorder) Unmount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unmount", arg0)
}
